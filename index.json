[{"content":"Since I built my house I want to automate everything and now it\u0026rsquo;s time to start a new project, my gate.\nHow to do Hardware So I bought a CAME BX-243 and it does not support home automation natively.\nThe CAME brand is slightly more expensive than the others but their equipment is much more solid and qualitative.\nThe installation is a bit complicated when you do it for the first time, but within a few hours the gate can be opened and closed without any problems\nTime to automate When I wanted to realize my automation I had some criteria\nHome Assistant compatibility Easy to use and configure Local polling Open source based The Smallest possible to fit in the gate box After several hours of research, I found this amazing mod\nShelly UNI on Amazon - ~15‚Ç¨\nWiring Shelly CAME VCC 10 N 11 IN_1 5 OUT1 GND 2 OUT1 AC/DC 7 Like this\nHow to flash it You can use it out of the box but I want to flash it with esphome and it\u0026rsquo;s easy\nConnect the device to my network Flash it with tasmota (https://github.com/yaourdt/mgos-to-tasmota) Flash it with tasmota minimal (http://ota.tasmota.com/tasmota/tasmota-minimal.bin.gz) Generate an esphome binary for my device like this in your home assistant ESPHome addons esphome: name: portail esp8266: board: esp01_1m # Enable logging logger: # Enable Home Assistant API api: encryption: key: \u0026#34;your_encryptionkey\u0026#34; ota: password: \u0026#34;your_password\u0026#34; wifi: ssid: !secret wifi_ssid password: !secret wifi_password # Enable fallback hotspot (captive portal) in case wifi connection fails ap: ssid: \u0026#34;Portail Fallback Hotspot\u0026#34; password: \u0026#34;your_password\u0026#34; captive_portal: web_server: port: 80 # Input #GPIO12 (1) #GPIO13 (2) # Output (Relay) # GPIO04 (2) # GPIO15 (1) binary_sensor: - platform: gpio id: gate_sensor name: \u0026#34;Gate Sensor\u0026#34; pin: GPIO12 filters: - delayed_on_off: 50ms switch: - platform: gpio pin: GPIO15 name: \u0026#34;Gate Switch\u0026#34; icon: \u0026#34;mdi:gate\u0026#34; id: gate_switch on_turn_on: - delay: 500ms - switch.turn_off: gate_switch cover: - platform: template name: \u0026#34;Portail\u0026#34; icon: \u0026#34;mdi:gate\u0026#34; device_class: gate lambda: |- if (id(gate_sensor).state) { return COVER_CLOSED; } else { return COVER_OPEN; } open_action: - switch.turn_on: gate_switch close_action: - switch.turn_on: gate_switch stop_action: - switch.turn_on: gate_switch optimistic: true assumed_state: false Now you can open/close the gate and know its state with your favorite home automation system.\nEt voil√† !\n","permalink":"https://acesyde.github.io/posts/2023/01/howto-automate-your-gate/","summary":"\u003cp\u003eSince I built my house I want to automate everything and now it\u0026rsquo;s time to start a new project, my gate.\u003c/p\u003e","title":"How to automate your gate"},{"content":"Hi üëã My name is Pierre-Emmanuel Mercier\nüñ•Ô∏è I\u0026rsquo;m a Software Architect üè£ I‚Äôm currently working at Betclic Group (Gambling Company) üè† I live in France üí¨ Ask me about .NET, Docker, AWS, Azure üåê Socials: üíª Tech Stack: ","permalink":"https://acesyde.github.io/about/","summary":"about","title":"üí´ About Me"}]