<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Devops on Tech Blog - Acesyde</title>
    <link>https://blog.ace-dev.me/tags/devops/</link>
    <description>Recent content in Devops on Tech Blog - Acesyde</description>
    <generator>Hugo -- 0.146.7</generator>
    <language>en</language>
    <lastBuildDate>Sun, 20 Apr 2025 00:00:00 +0200</lastBuildDate>
    <atom:link href="https://blog.ace-dev.me/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Sharing Tasks with Mise ‚Äì How We Standardize and Scale Across Projects</title>
      <link>https://blog.ace-dev.me/posts/2025/04/how-we-use-mise-at-work-part-3/</link>
      <pubDate>Sun, 20 Apr 2025 00:00:00 +0200</pubDate>
      <guid>https://blog.ace-dev.me/posts/2025/04/how-we-use-mise-at-work-part-3/</guid>
      <description>&lt;h2 id=&#34;-reduce-your-boilerplate&#34;&gt;üßº Reduce your boilerplate&lt;/h2&gt;
&lt;p&gt;As mentioned in &lt;a href=&#34;https://blog.ace-dev.me/posts/2025/04/how-we-use-mise-at-work-part-1/&#34;&gt;Part 1&lt;/a&gt;, we‚Äôve moved away from Makefiles and bash scripts in favor of &lt;code&gt;mise&lt;/code&gt;. In this final post of the series, I‚Äôll walk you through how we‚Äôve taken things further by sharing tasks across projects and environments‚Äîspeeding up onboarding and keeping things consistent between dev machines and CI/CD.&lt;/p&gt;
&lt;h2 id=&#34;-how-tasks-work-in-mise&#34;&gt;‚öôÔ∏è How tasks work in &lt;code&gt;mise&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mise&lt;/code&gt; offers multiple ways to define and run tasks. After experimenting, we‚Äôve decided to use a mix of both TOML-based and file-based tasks to get the best of both worlds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How We Use Mise and DevContainers to Simplify Development</title>
      <link>https://blog.ace-dev.me/posts/2025/04/how-we-use-mise-at-work-part-2/</link>
      <pubDate>Sat, 19 Apr 2025 14:00:00 +0200</pubDate>
      <guid>https://blog.ace-dev.me/posts/2025/04/how-we-use-mise-at-work-part-2/</guid>
      <description>&lt;p&gt;In our development team, consistency and automation are essential. Here&amp;rsquo;s how we use Microsoft DevContainers and the fantastic &lt;code&gt;mise&lt;/code&gt; tool to streamline tooling and environment setup. The combination of both provides a clean, reliable, and reproducible workflow that scales with the team.&lt;/p&gt;
&lt;h2 id=&#34;devcontainers-and-mise-&#34;&gt;DevContainers and Mise ‚ù§Ô∏è&lt;/h2&gt;
&lt;p&gt;Using Microsoft DevContainers has significantly improved our development workflow by offering consistent environments across different machines. They make onboarding faster and smoother, especially for new team members, by encapsulating all dependencies and tools. However, one of the trade-offs is the added complexity introduced by layered features like Dockerfile extensions and Compose setups. These layers can sometimes obscure what&amp;rsquo;s really happening under the hood, making debugging and customization more challenging.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The Journey from Makefiles to Mise: Transforming Our Development Workflow</title>
      <link>https://blog.ace-dev.me/posts/2025/04/how-we-use-mise-at-work-part-1/</link>
      <pubDate>Sat, 19 Apr 2025 00:00:00 +0200</pubDate>
      <guid>https://blog.ace-dev.me/posts/2025/04/how-we-use-mise-at-work-part-1/</guid>
      <description>&lt;h2 id=&#34;reflecting-on-our-legacy-makefiles-and-bash-scripts&#34;&gt;Reflecting on Our Legacy: Makefiles and Bash Scripts&lt;/h2&gt;
&lt;p&gt;For many years, Makefiles and bash scripts were the faithful workhorses of our development process. They efficiently automated our tasks, were well-understood by developers, and did the job reliably, day in and day out. Whether it was setting up development environments or automating builds, these familiar tools were the backbone of our workflows.&lt;/p&gt;
&lt;p&gt;However, as our organization expanded, our trusty old tools began showing signs of strain:&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
